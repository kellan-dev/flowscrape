generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Workflow {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?
  definition  String
  status      String // DRAFT, PUBLISHED

  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workflowExecutions WorkflowExecution[]

  @@unique([userId, name])
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  workflowId  String
  userId      String
  trigger     String
  status      String
  startedAt   DateTime?
  completedAt DateTime?
  definition  String    @default("{}")

  creditsConsumed Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phases   ExecutionPhase[]
  workflow Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model ExecutionPhase {
  id              String    @id @default(cuid())
  userId          String
  status          String
  number          Int
  node            String
  name            String
  startedAt       DateTime?
  completedAt     DateTime?
  inputs          String?
  outputs         String?
  creditsConsumed Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workflowExecutionId String
  workflowExecution   WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  executionLogs       ExecutionLog[]
}

model ExecutionLog {
  id        String   @id @default(cuid())
  logLevel  String
  message   String
  timestamp DateTime @default(now())

  executionPhaseId String
  executionPhase   ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}

model UserBalance {
  userId  String @id
  credits Int
}
